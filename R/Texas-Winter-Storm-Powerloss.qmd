---
title: "Texas-Winter-Storm-Powerloss"
author: "Patricia Park"
format: html
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warnings = 'FALSE', message = 'FALSE')
```

```{r}
#read in libraries
library(sf)
library(tidyverse)
library(terra)
library(spData)
library(spDataLarge)
library(geodata)
library(tmap)
library(stars)
library(sp)
library(raster)
library(ggspatial)
```

## Overview

"In February 2021, the state of Texas suffered a major power crisis, which came about as a result of three severe winter storms sweeping across the United States on February 10--11, 13--17, and 15--20."[^1] For more background, check out these [engineering](https://www.youtube.com/watch?v=08mwXICY4JM&ab_channel=PracticalEngineering) and [political](https://www.youtube.com/watch?v=Zcrsgdl_hP0&ab_channel=Vox) perspectives.

[^1]: Wikipedia. 2021. "2021 Texas power crisis." Last modified October 2, 2021. <https://en.wikipedia.org/wiki/2021_Texas_power_crisis>.

For this assignment, you are tasked with: - estimating the number of homes in Houston that lost power as a result of the first two storms - investigating if socioeconomic factors are predictors of communities recovery from a power outage

Your analysis will be based on remotely-sensed night lights data, acquired from the [Visible Infrared Imaging Radiometer Suite (VIIRS)](https://en.wikipedia.org/wiki/Visible_Infrared_Imaging_Radiometer_Suite) onboard the Suomi satellite. In particular, you will use the VNP46A1 to detect differences in night lights before and after the storm to identify areas that lost electric power.

To determine the number of homes that lost power, you link (spatially join) these areas with [OpenStreetMap](https://www.openstreetmap.org/#map=4/38.01/-95.84) data on buildings and roads.

To investigate potential socioeconomic factors that influenced recovery, you will link your analysis with data from the US Census Bureau.

##### Learning objectives:

-   load vector/raster data
-   simple raster operations
-   simple vector operations
-   spatial joins

### Data

#### Night lights

Use NASA's Worldview to explore the data around the day of the storm. There are several days with too much cloud cover to be useful, but 2021-02-07 and 2021-02-16 provide two clear, contrasting images to visualize the extent of the power outage in Texas.

VIIRS data is distributed through NASA's [Level-1 and Atmospheric Archive & Distribution System Distributed Active Archive Center (LAADS DAAC)](https://ladsweb.modaps.eosdis.nasa.gov/). Many NASA Earth data products are distributed in 10x10 degree tiles in sinusoidal equal-area projection. Tiles are identified by their horizontal and vertical position in the grid. Houston lies on the border of tiles h08v05 and h08v06. We therefore need to download two tiles per date.

As you're learning in EDS 220, accessing, downloading, and preparing remote sensing data is a skill in it's own right! To prevent this assignment from being a large data wrangling challenge, we have downloaded and prepped the following files for you to work with, stored in the `VNP46A1` folder.

-   `VNP46A1.A2021038.h08v05.001.2021039064328.h5.tif`: tile h08v05, collected on 2021-02-07
-   `VNP46A1.A2021038.h08v06.001.2021039064329.h5.tif`: tile h08v06, collected on 2021-02-07
-   `VNP46A1.A2021047.h08v05.001.2021048091106.h5.tif`: tile h08v05, collected on 2021-02-16
-   `VNP46A1.A2021047.h08v06.001.2021048091105.h5.tif`: tile h08v06, collected on 2021-02-16

#### Roads

Typically highways account for a large portion of the night lights observable from space (see Google's [Earth at Night](https://earth.google.com/web/@27.44405464,-84.7693044,206.63660162a,8916361.52264659d,35y,0h,0t,0r/data=CiQSIhIgMGY3ZTJkYzdlOGExMTFlNjk5MGQ2ZjgxOGQ2OWE2ZTc)). To minimize falsely identifying areas with reduced traffic as areas without power, we will ignore areas near highways.

[OpenStreetMap (OSM)](https://planet.openstreetmap.org/) is a collaborative project which creates publicly available geographic data of the world. Ingesting this data into a database where it can be subsetted and processed is a large undertaking. Fortunately, third party companies redistribute OSM data. We used [Geofabrik's download sites](https://download.geofabrik.de/) to retrieve a shapefile of all highways in Texas and prepared a Geopackage (`.gpkg` file) containing just the subset of roads that intersect the Houston metropolitan area.Â 

-   `gis_osm_roads_free_1.gpkg`

#### Houses

We can also obtain building data from OpenStreetMap. We again downloaded from Geofabrick and prepared a GeoPackage containing only houses in the Houston metropolitan area.

-   `gis_osm_buildings_a_free_1.gpkg`

#### Socioeconomic

We cannot readily get socioeconomic information for every home, so instead we obtained data from the [U.S. Census Bureau's American Community Survey](https://www.census.gov/programs-surveys/acs) for census tracts in 2019. The *folder* `ACS_2019_5YR_TRACT_48.gdb` is an ArcGIS ["file geodatabase"](https://desktop.arcgis.com/en/arcmap/latest/manage-data/administer-file-gdbs/file-geodatabases.htm), a multi-file proprietary format that's roughly analogous to a GeoPackage file.

You can use `st_layers()` to explore the contents of the geodatabase. Each layer contains a subset of the fields documents in the [ACS metadata](https://www2.census.gov/geo/docs/maps-data/data/tiger/prejoined/ACSMetadata2011.txt).

The geodatabase contains a layer holding the geometry information, separate from the layers holding the ACS attributes. You have to combine the geometry with the attributes to get a feature layer that `sf` can use.

## Assignment

Below is an outline of the steps you should consider taking to achieve the assignment tasks.

#### Find locations of blackouts

For improved computational efficiency and easier interoperability with `sf`, I recommend using the `stars` package for raster handling.

##### combine the data (5 points)

-   read in night lights tiles
-   combine tiles into a single `stars` object for each date (2021-02-07 and 2021-02-16) - hint: use `st_mosaic`

```{r include=TRUE}
#Read in and combine .tif files:
#read in stars .tif

night_lights1_02_07 <- read_stars("../data/VNP46A1/VNP46A1.A2021038.h08v05.001.2021039064328.tif")
night_lights2_02_07 <- read_stars("../data/VNP46A1/VNP46A1.A2021038.h08v06.001.2021039064329.tif")
night_lights3_02_16 <- read_stars("../data/VNP46A1/VNP46A1.A2021047.h08v05.001.2021048091106.tif")
night_lights4_02_16 <- read_stars("../data/VNP46A1/VNP46A1.A2021047.h08v06.001.2021048091105.tif")


#combine 02-07 stars files together
night_light_combine_02_07 <- st_mosaic(night_lights1_02_07, 
                                 night_lights2_02_07,
                                 file_ext = ".tif")

#combine 02-16 stars files together
night_light_combine_02_16 <- st_mosaic(night_lights3_02_16, 
                                 night_lights4_02_16,
                                 file_ext = ".tif")

#plot 02-07 star file to see if they were correctly combined
plot(night_light_combine_02_07, main = "2/06 Houston Satellite Image", axes = TRUE)
#plot 02-16 star file to see if they were correctly combined
plot(night_light_combine_02_16, main = "2/17 Houston Satellite Image", axes = TRUE)

```

##### create a blackout mask (10 points)

-   find the change in night lights intensity (presumably) caused by the storm
-   reclassify the difference raster, assuming that any location that experienced a drop of more than 200 nW cm^-2^sr^-1^ experienced a blackout
-   assign `NA` to all locations that experienced a drop of *less* than 200 nW cm^-2^sr^-1^

```{r include=TRUE}
#Find change in night light intensity:
#find the difference between the two night lights intensity
night_light_change <- (night_light_combine_02_07 - night_light_combine_02_16)
#plot night_light_change to see the outcome
plot(night_light_change, main = "Houston Blackout Mask Change", axes = TRUE)

```

```{r}
#SELF CHECK: what does the new stars look like and what is some information on it?
# print(night_light_change)
# hist(night_light_change)
```


```{r}
#Reclassify and plot reclassified night light change:
#reclassify the difference in night light change to show those that are above and below 200
night_light_change_reclassify <- cut(x = night_light_change, breaks = c(-Inf, 200, Inf), labels = c("Below 200", "Above and Including 200")) #rename legend labels

#plot reclassified matrix to see if it was changed
plot(night_light_change_reclassify, 
     main = "Houston Blackout Mask Reclassified", 
     axes = TRUE,
     key.pos = 1, #position of key is at bottom
     col = c('white', 'black')) #change color scheme
```


```{r}
#create a blackout mask that has those that are greater than 200 nW cm^-2^sr^-1^:
#assign NA to values that are below 200
night_light_change[night_light_change <= 200] = NA
```

```{r}
#SELF CHECK
#plot the blackout mask to see if it includes and are above 200
#plot(night_light_change)

```

##### vectorize the mask (5 points)

-   use `st_as_sf()` to vectorize the blackout mask
-   fix any invalid geometries using `st_make_valid`

```{r include=TRUE}
#Vectorize blackout mask and fix geometries:
#vectorize the blackout mask
night_light_change_sf <- st_as_sf(night_light_change)

#fix invalid geometries
night_light_change_sf_fix <- st_make_valid(night_light_change_sf)
```

```{r}
#SELFCHECK
#check if subsetting was done correctly by creating an if else statement to see if values equal or is above 200
# if(any(night_light_change_sf_2$VNP46A1.A2021038.h08v05.001.2021039064328.tif >= 200)){
#   print("these values are good")
# }  else {
#   print("these are not good")
# }
   

```

##### crop the vectorized map to our region of interest (10 points)

-   define the Houston metropolitan area with the following coordinates
    -   (-96.5, 29), (-96.5, 30.5), (-94.5, 30.5), (-94.5, 29)
-   turn these coordinates into a polygon using `st_polygon`
-   convert the polygon into a simple feature collection using `st_sfc()` and assign a CRS
    -   hint: because we are using this polygon to crop the night lights data it needs the same CRS
-   crop (spatially subset) the blackout mask to our region of interest
-   re-project the cropped blackout dataset to EPSG:3083 (NAD83 / Texas Centric Albers Equal Area)

```{r include=TRUE}
#Create polygon:
#create matrix with coordinates
houston_matrix <- matrix(c(-96.5,29,-96.5,30.5,-94.5,30.5,-94.5,29,-96.5,29), ncol = 2, byrow = TRUE)

#make the matrix a polygon of houston
houston_polygon <- st_polygon(list(houston_matrix))

#SELF CHECK
#plot the houston polygon
plot(houston_polygon)
```

```{r, warning = FALSE}
#Change CRS to be EPSG:3083:
#see what the crs is for the night_light_change sf
st_crs(night_light_change_sf_fix)

#change the crs of the houston polygon
houston_sf_4326 <- st_sfc(houston_polygon, crs = 'EPSG:4326')

#crop the night_light_change_sf to fit the houston_sf polygon (crs is 4326)
night_light_cropped_4326 <- st_crop(night_light_change_sf_fix, houston_sf_4326)

#SELF CHECK: check CRS if it was properly changed to 4326
#st_crs(night_light_cropped_4326)

#transform the crs to EPSG:3083
night_light_cropped_3083 <- st_transform(night_light_cropped_4326, crs = "EPSG:3083")

#SELF CHECK: check if CRS was properly changed to 3083
#st_crs(night_light_cropped_3083)
```

##### exclude highways from blackout mask (10 points)

The roads geopackage includes data on roads other than highways. However, we can avoid reading in data we don't need by taking advantage of `st_read`'s ability to subset using a SQL query.

-   define SQL query
    -   **Answer**: It's a command to get data out of a database. It helps with getting the needed information you want in an easier manner. In this case, we are using it to help us filter for specific observations we are interested in.
-   load just highway data from geopackage using `st_read`
-   reproject data to EPSG:3083
-   identify areas within 200m of all highways using `st_buffer`
    -   hint: `st_buffer` produces undissolved buffers, use `st_union` to dissolve them
-   find areas that experienced blackouts that are further than 200m from a highway

`query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"` `highways <- st_read("data/gis_osm_roads_free_1.gpkg", query = query)`

```{r include=FALSE, warning = FALSE}
#Create a buffer within 200m from highways and filter to areas that experience blackouts further than 200m from the highway:
#load in highway data by filtering with the query
query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"
highway <- st_read("../data/gis_osm_roads_free_1.gpkg", query = query)


#SELF CHECK: plot highway to see if I just got highway skeleton
#plot(highway)
```

```{r warning = FALSE}

#change CRS of highway to 3083
highway_3083 <- st_transform(highway, crs = "EPSG:3083")

#create a buffer of 200 meters around the highways and union them to get one polygon
highway_200 <- st_buffer(highway_3083, dist = 200)
highway_200_union <- st_union(highway_200)


#SELF CHECK: plot highway to see if I just got highway skeleton
#plot(highway_200_union)


#crop night light blackout mask to find those that are outside  highway_200_union
night_light_cropped_highway <- st_difference(night_light_cropped_3083, highway_200_union)
print(paste("Number of areas that are over 200m away:", nrow(night_light_cropped_highway)))


#SELF CHECK: plot the cropped night mask and see how many observations there are
plot(night_light_cropped_highway)
#nrow(night_light_cropped_highway)
```

#### Find homes impacted by blackouts

##### load buildings data (10 points)

-   load buildings dataset using `st_read` and the following SQL query to select only residential buildings
-   hint: reproject data to EPSG:3083

`SELECT *` `FROM gis_osm_buildings_a_free_1` `WHERE (type IS NULL AND name IS NULL)` `OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')`

```{r include=FALSE, warning = FALSE}
#Load in dataset and transform CRS:
#load in highway data by filtering with the query
query2 <- "SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type IS NULL AND name IS NULL) OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')"
building <- st_read("../data/gis_osm_buildings_a_free_1.gpkg", query = query2)

#transform building dataset to CRS 3083
building_texas <- st_transform(building, crs = 'EPSG:3083')


#SELF CHECK see if CRS was properly transformed
#st_crs(building_texas)

```

##### find homes in blackout areas (20 points)

-   filter to homes within blackout areas
-   count number of impacted homes

```{r include=TRUE}
#Filter and find impacted homes in blackout areas:
#check if crs are the same
print(paste("The two CRS are the same:", st_crs(building_texas) == st_crs(night_light_cropped_3083)))

#filter to home that are with in the blackout areas
buildings_cropped <- building_texas %>% 
  st_filter(night_light_cropped_highway, 
            .predicate = st_intersects)

#count number of impacted homes from filtered dataset
print(paste("Number of impacted homes:", length(unique(buildings_cropped$osm_id))))

#SELF CHECK: check if our filtered dataset fits in the cropped houston polygon

#change houston polygon CRS to 3083
#houston_sf_3083 <- st_sfc(houston_polygon, crs = 'EPSG:3083')

#plot just the buildings cropped dataset
#plot(st_union(buildings_cropped))

#plot buildings_cropped on top of the houston polygon shape to see if it fits inside and compare with the plot before
# tm_shape(buildings_cropped) +
#   tm_polygons() +
#   tm_shape(houston_sf_3083) +
#   tm_dots()

#make sure we do not have duplicates of unique ID's in our filtered dataset
#unique(duplicated(buildings_cropped$osm_id))


```


#### Investigate socioeconomic factors

##### load ACS data (10 points)

-   use `st_read()` to load the geodatabase layers
-   geometries are stored in the `ACS_2019_5YR_TRACT_48_TEXAS` layer
-   income data is stored in the `X19_INCOME` layer
-   select the median income field `B19013e1`
-   hint: reproject data to EPSG:3083

```{r include = FALSE, warning = FALSE}
#Read in Geometries and Income layer and tidy up column names for easier manipulation:
#look at the layers in this geodatabase
st_layers("../data/ACS_2019_5YR_TRACT_48_TEXAS.gdb")

#read in texas geodatabase data, filtering to Income layer
texas_gdb <- st_read("../data/ACS_2019_5YR_TRACT_48_TEXAS.gdb", layer = 'ACS_2019_5YR_TRACT_48_TEXAS')
texas_income <- st_read("../data/ACS_2019_5YR_TRACT_48_TEXAS.gdb", layer = 'X19_INCOME')

#rename texas income GEOID to GEOID_Data
texas_income <- texas_income %>% 
  rename_at('GEOID', ~'GEOID_Data')

#subset so only texas income has GEOID_Data and B19013e1
texas_income <- texas_income[c("GEOID_Data", "B19013e1")]


#SELF CHECK:
#check CRS to make sure its correct
#st_crs(texas_median)

```

##### determine which census tracts experienced blackouts (10 points)

-   join the income data to the census tract geometries
-   hint: make sure to join by geometry ID
-   spatially join census tract data with buildings determined to be impacted by blackouts
-   find which census tracts had blackouts

```{r include=TRUE}
#Join datasets and find out how many census tracks had blackouts:
#join the two dataset at GEOID_Data
texas_join <- left_join(texas_gdb, texas_income, by = 'GEOID_Data') %>% 
  st_transform(crs = "EPSG:3083") %>% #transform CRS to 3083
  rename_at('B19013e1', ~'Income') #rename to Income

#spatially join the census data to houston building cropped to the night light mask
texas_building_polygon <- st_join(texas_join, buildings_cropped)

#filter only to buildings_cropped
texas_building_polygon_filter <- st_filter(texas_join, buildings_cropped)

#take out the NA's in Income column
texas_building_filter_na <- texas_building_polygon_filter[!is.na(texas_building_polygon_filter$Income),]

#look at the length of unique GEOID to see which census tracks had blackouts
print(paste("Number of census tracts that had blackouts:", length(unique(texas_building_filter_na$GEOID))))

#SELF CHECK: see if there are any NA values still left in the Income column
# if(any(is.na(texas_building_join_filter$Income) == "FALSE")){
#   print("these values are good")
# }  else {
#   print("these are not good")
# }

```

##### compare incomes of impacted tracts to unimpacted tracts (10 points)

-   create a map of median income by census tract, designating which tracts had blackouts
-   plot the distribution of income in impacted and unimpacted tracts
-   write approx. 100 words summarizing your results and discussing any limitations to this study



```{r, warning = FALSE}
#Create a map of the median income of Houston census tracks that includes which tracts were impacted by the blackouts:
#setup for making map: (crop does not work if CRS is not 4326)
#change the crs of the texas_join to 4326
texas_join_4326 <- st_transform(texas_join, crs = 'EPSG:4326')

#crop texas_building_polygon_filter to Houston polygon
texas_houston <- st_crop(texas_join_4326, houston_sf_4326)

#change the crs to 3083
texas_houston_3083 <- st_transform(texas_houston, crs = 'EPSG:3083')


#SELF CHECK: plot houston to see if I get the polygons outline of each census track and if CRS was changed
# plot(texas_houston_3083["Income"])
# st_crs(texas_houston_3083)
```

```{r, warning = FALSE}
#plot map of median income indicating if there was blackout map or not
income_blackout_map <-ggplot() +
  theme_bw() +
  geom_sf(data = texas_houston_3083, #all of houston data
          aes(fill = Income)) + #fill is income
  geom_sf(data = texas_building_filter_na, #data that is impacted by the blackout
          aes(color = 'red'), #color outline is red
          fill = NA,
          show.legend = TRUE) +
  scale_color_hue('Blackout Area', labels = "Area of Blackout") + #add legend
  labs(title = "Median income of Houston, indicating which census tracts had blackouts") + #add title
  annotation_scale() + #add scale bar
  annotation_north_arrow(location = "br", #add north arrow
                         style = ggspatial::north_arrow_nautical) 


#plot histogram of median income count showing how many were impacted by the blackout or not
income_blackout_hist <- ggplot() +
  geom_histogram(data = texas_houston_3083, #all of houston data
                 aes(x = Income, #plotting Income
                     fill = 'Income'), #fill is true
                 show.legend = TRUE) +
  geom_histogram(data = texas_building_filter_na, #data that is impacted by the blackout
                 aes(x = Income, #plotting Income
                     fill = 'Income2'), #fill is true
                 show.legend = TRUE) +
  scale_fill_manual(name = 'Blackout Area', values = c('lightskyblue', 'indianred2'), labels = c('Unimpacted', 'Impacted')) + #add legend
  labs(title = "Distribution of Median Income in Houston", #add title
       y = "Count") #add y axis label

print(income_blackout_map)
print(income_blackout_hist)
```


**Summary**: Looking at the map, many of the impacted tracts were the ones closer to the middle of Houston. A more informative plot is the histogram, where income is shown to have an impact on if there was a blackout in that area. This histogram can be interpreted as a stacked histogram. Many of the blackout areas happened in lower-income tracts, with very few blackouts in areas with higher median incomes. A limitation of this study is not knowing the number of people living in these blackout areas. More people translates to more energy being used. While the blackouts at large could have been caused by the storm, there may be a possibility that the high use of energy in those areas may have contributed to the blackout as seen on the map and graph.